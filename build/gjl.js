var c={};window.gjl=c;c.j=function(a,b){function d(){}d.prototype=a.prototype;b.prototype=new d;b.prototype.constructor=b};c.ea=function(a,b){return"Feature"===a.type||"FeatureCollection"===a.type?g.prototype.l.call(a,b):h.prototype.l.call(a,b)};c.validateGeoJSON=c.ea;c.i={};c.geom=c.i;function h(){}h.prototype.l=function(a){var b=c.a.v(this);if(0===b.code)return!0;a&&c.error.f(b);return!1};h.prototype.isValid=h.prototype.l;
function k(a){var b=c.a.B(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="Point"}c.j(h,k);c.i.Point=k;function l(a){var b=c.a.G(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="MultiPoint"}c.j(h,l);c.i.MultiPoint=l;function m(a){var b=c.a.D(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="LineString"}c.j(h,m);c.i.LineString=m;function n(a){var b=c.a.F(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="MultiLineString"}c.j(h,n);c.i.MultiLineString=n;
function p(a){var b=c.a.H(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="Polygon"}c.j(h,p);c.i.Polygon=p;function q(a){var b=c.a.M(a);0<b.code&&c.error.f(b);this.coordinates=a;this.type="MultiPolygon"}c.j(h,q);c.i.MultiPolygon=q;
function r(a){"[object Array]"!==Object.prototype.toString.call(a)&&c.error.f({b:a,code:1});var b;this.geometries=[];for(var d=0;d<a.length;++d)a[d]instanceof h?(a[d].l(!0),this.geometries.push(a[d])):(b=c.a.v(a[d]),0<b.code?c.error.f(b):this.geometries.push(a[d]));this.type="GeometryCollection";c.c.K(this)}c.j(h,r);c.i.GeometryCollection=r;c.J={};c.feat=c.J;
function g(a,b){var d={code:0};this.properties=this.geometry=null;a instanceof h?(a.l(!0),this.geometry=a):a&&(d=c.a.v(a),0<d.code&&c.error.f(d),this.geometry=a);b&&(d=c.a.I(b),0<d.code&&c.error.f(d),this.properties=b);this.type="Feature";c.c.K(this)}c.J.Feature=g;g.prototype.l=function(a){if("Feature"!==this.type&&"FeatureCollection"!==this.type)return a&&c.error.f({b:this.type,code:7}),!1;var b=c.a[this.type](this);return 0<b.code?(a&&c.error.f(b),!1):!0};g.prototype.isValid=g.prototype.l;
function t(a){"[object Array]"!==Object.prototype.toString.call(a)&&c.error.f({b:a,code:1});var b;this.features=[];for(var d=0;d<a.length;++d)a[d]instanceof g?(a[d].l(!0),this.features.push(a[d])):(b=c.a.C(a[d]),0<b.code?c.error.f(b):this.features.push(a[d]));this.type="FeatureCollection";c.c.K(this)}c.j(g,t);c.J.FeatureCollection=t;c.a={};
c.a.B=function(a){if("[object Array]"!==Object.prototype.toString.call(a))return{b:a,code:1};for(var b=0;b<a.length;++b)if("number"!==typeof a[b])return{b:a[b],code:2};return 2>a.length?{b:a,code:12}:{code:0}};c.a.Point=c.a.B;c.a.G=function(a,b){if("[object Array]"!==Object.prototype.toString.call(a))return{b:a,code:1};for(var d={code:0},e=0;0===d.code&&e<a.length;)d=c.a.B(a[e]),++e;if(0<d.code)return d;if(b)for(e=0;e<a[0].length;++e)a[0][e]!==a[a.length-1][e]&&(d={b:a,code:18});return d};
c.a.MultiPoint=c.a.G;c.a.D=c.a.G;c.a.LineString=c.a.D;c.a.F=function(a,b){if("[object Array]"!==Object.prototype.toString.call(a))return{b:a,code:1};for(var d={code:0},e=0;0===d.code&&e<a.length;)d=c.a.D(a[e],b),++e;return d};c.a.MultiLineString=c.a.F;c.a.H=function(a){return c.a.F(a,!0)};c.a.Polygon=c.a.H;c.a.M=function(a){if("[object Array]"!==Object.prototype.toString.call(a))return{b:a,code:1};for(var b={code:0},d=0;0===b.code&&d<a.length;)b=c.a.H(a[d]),++d;return b};c.a.MultiPolygon=c.a.M;
c.a.W=function(a){if("[object Array]"!==Object.prototype.toString.call(a.geometries))return{b:a.geometries,code:1};for(var b={code:0},d=0;d<a.geometries.length;++d)if(b=c.a.v(a.geometries[d]),0<b.code)return b;a.bbox&&(b=c.a.u(a.bbox,c.c.A(c.c.s(a))));return b};
c.a.v=function(a){var b={code:0};if(!(a.type||a.geometries&&a.coordinates))return{b:a,code:6};b=c.c.o(a);b=c.a.L(a,b);return 0<b.code?b:"GeometryCollection"===a.type&&a.geometries?c.a.W(a):"Point"!==a.type&&"MultiPoint"!==a.type&&"LineString"!==a.type&&"MultiLineString"!==a.type&&"Polygon"!==a.type&&"MultiPolygon"!==a.type?{b:a.type,code:5}:a.coordinates?(b=c.a[a.type](a.coordinates),0===b.code&&a.bbox?c.a.u(a.bbox,c.c.A(a.coordinates)):b):{b:a,code:6}};
c.a.V=function(a){var b={code:0};if("FeatureCollection"!==a.type)return{b:a.type,code:7};if("[object Array]"!==Object.prototype.toString.call(a.features))return{b:a.features,code:1};b=c.c.o(a);b=c.a.L(a,b);if(0<b.code)return b;for(var d=0;d<a.features.length;++d)if(b=c.a.C(a.features[d]),0<b.code)return b;a.bbox&&(b=c.a.u(a.bbox,c.c.A(c.c.s(a))));return b};c.a.FeatureCollection=c.a.V;
c.a.C=function(a){var b={code:0};if(null!==a.geometry&&"[object Object]"!==Object.prototype.toString.call(a.geometry))return{b:a.geometry,code:11};if(a.geometry&&(b=c.a.v(a.geometry),0<b.code))return b;if(null!==a.properties&&"[object Object]"!==Object.prototype.toString.call(a.properties))return{b:a.properties,code:11};if(a.properties&&(b=c.a.I(a.properties),0<b.code))return b;b=c.c.o(a);b=c.a.L(a,b);if(0<b.code)return b;a.bbox&&(b=c.a.u(a.bbox,a.geometry?c.c.A(c.c.s(a.geometry)):0));return b};
c.a.Feature=c.a.C;c.a.I=function(a){if("[object Object]"!==Object.prototype.toString.call(a))return{b:a,code:9};for(var b in a){var d=typeof a[b];if("string"!==d&&"number"!==d&&"boolean"!==d&&null!==a[b])return{b:a[b],code:10}}return{code:0}};c.a.u=function(a,b){var d=c.a.B(a);return 0===d.code&&a.length!==2*b?{b:a,code:8}:d};c.a.L=function(a,b){return 1<b.g?{code:13}:1!==b.g||a.crs?1===b.g&&a.crs?c.a.U(a.crs):{code:0}:{b:b.h,code:14}};
c.a.U=function(a){var b={b:a,code:15};return a.type?"name"===a.type?a.properties&&"string"===typeof a.properties.name?{code:0}:b:"link"===a.type?a.properties&&"string"===typeof a.properties.href?(b=document.createElement("a"),b.href=a.properties.href,b.protocol&&b.host?{code:0}:{b:a.properties.href,code:17}):b:{b:a.type,code:16}:b};
c.a.w=function(a){var b;if(a.vertices&&("number"!==typeof a.vertices||0!==a.vertices%1))return{b:a.vertices,code:3};if(a.stride&&("number"!==typeof a.stride||2>a.stride||0!==a.stride%1))return{b:a.stride,code:4};if(a.type&&"Point"!==a.type&&"LineString"!==a.type&&"Polygon"!==a.type)return{b:a.type,code:5};if(a.numProp&&a.propSample){if("number"!==typeof a.numProp||0!==a.numProp%1)return{b:a.numProp,code:3};b=c.a.I(a.propSample);if(0<b.code)return b;b=0;for(var d in a.propSample)b++;if(b!==a.numProp)return{code:20}}else if(a.numProp){if("number"!==
typeof a.numProp||0!==a.numProp%1)return{b:a.numProp,code:3}}else if(a.propSample)return{b:"number of properties",code:19};return b=a.bbox?c.a.u(a.bbox,a.stride):{code:0}};c.error={};
c.error.f=function(a){switch(a.code){default:throw new TypeError(JSON.stringify(a.code)+" is an invalid error code.");case 1:throw new TypeError(JSON.stringify(a.b)+" is not an array.");case 2:throw new TypeError(JSON.stringify(a.b)+" is not a number.");case 3:throw new TypeError(JSON.stringify(a.b)+" must be an integer.");case 4:throw new TypeError(JSON.stringify(a.b)+" must be an integer, and greater than two.");case 5:throw new TypeError(JSON.stringify(a.b)+" is an invalid geometry type. For the random factory the supported types are Point, LineString, and Polygon.");
case 6:throw new TypeError("Invalid GeoJSON: "+JSON.stringify(a.b)+".");case 7:throw new TypeError(JSON.stringify(a.b)+" is an invalid feature type.");case 8:throw new RangeError("Array "+JSON.stringify(a.b)+" has wrong number of members.");case 9:throw new TypeError(JSON.stringify(a.b)+" is not an object.");case 10:throw new TypeError(JSON.stringify(a.b)+" is not a primitive.");case 11:throw new TypeError(JSON.stringify(a.b)+" must be null, or an object.");case 12:throw Error("Invalid coordinate array: "+
JSON.stringify(a.b)+". There must be at least two coordinates in a position, and four in a bounding box.");case 13:throw Error("There are more than one CRS definitions in the GeoJSON.");case 14:throw Error("CRS "+JSON.stringify(a.b)+" must be on the top level.");case 15:throw new TypeError("Invalid CRS: "+JSON.stringify(a.b)+".");case 16:throw new TypeError(JSON.stringify(a.b)+" is an invalid CRS type. Valid types are name, and link.");case 17:throw new SyntaxError(JSON.stringify(a.b)+" must be a dereferenceable URI.");
case 18:throw new SyntaxError(JSON.stringify(a.b)+" must be a LinearRing (it must be closed).");case 19:throw Error("Missing "+JSON.stringify(a.b)+".");case 20:throw Error("Sample of properties must contain members equal to number of properties.");}};
function u(a){var b=a||{};b.type=b.type||"Point";b.vertices=b.vertices||5;b.stride=b.stride||2;b.numProp=b.numProp||0;a=c.a.w(b);0<a.code&&c.error.f(a);b.bbox=b.bbox||c.random.$(b.stride);b.propSample=b.propSample||c.random.T(b.propNum);a=c.a.w(b);0<a.code&&c.error.f(a);a=null;this.R=function(){return b};this.setVertices=this.ca=function(a){if(a||0===a){var e=c.a.w({vertices:a});0<e.code&&c.error.f(e);b.vertices=a}};this.setProperties=this.Y=function(a,e){if(a||0===a){var f=c.a.w({numProp:a,propSample:e});
if(20===f.code&&a||0===a)e=c.random.T(a);0<f.code&&20!==f.code&&c.error.f(f);b.numProp=a;b.propSample=e}}}c.RandomFactory=u;u.prototype.O=function(){var a=this.R(),b="LineString"===a.type?1:"Polygon"===a.type?2:null,d;"Point"===a.type?d=c.random.S(a.stride,a.bbox):(d=c.random.Z(b,a.vertices,a.bbox),2===b&&d[0].push(d[0][0]));return new c.i[a.type](d)};u.prototype.generateGeometry=u.prototype.O;
u.prototype.N=function(){var a=this.R(),b=this.O(),d=null;a.numProp&&(d=c.random.aa(a.propSample));return new g(b,d)};u.prototype.generateFeature=u.prototype.N;u.prototype.X=function(a){var b=c.a.w({vertices:a});0<b.code&&c.error.f(b);for(var b=[],d=0;d<a;++d)b.push(this.N());return new t(b)};u.prototype.generateFeatures=u.prototype.X;c.random={};
c.random.S=function(a,b){var d=[];d.push(parseFloat((Math.random()*(b[a]-b[0])+b[0]).toFixed(6)));d.push(parseFloat((Math.random()*(b[a+1]-b[1])+b[1]).toFixed(6)));for(var e=2;e<a;++e)d.push(parseFloat((Math.random()*(b[a+e]-b[e])+b[e]).toFixed(6)));return d};c.random.$=function(a){for(var b=c.m.P.slice(0,2),d=2;d<2*a;++d)2>d%a?b.push(c.m.P[d%a+2]):b.push(c.m.fa[Math.floor(d/a)]);return b};
c.random.Z=function(a,b,d){for(var e=[],f=1,v=0;v<b;++v)e.push(c.random.S(d.length/2,d));for(;f<a;)e=[e],++f;return e};c.random.T=function(a){for(var b={},d=0;d<a;++d)b[Math.random().toString(36).substr(2,3)]=c.m.da[d%4];return b=0===Object.getOwnPropertyNames(b).length?null:b};c.random.aa=function(a){var b={},d;for(d in a)b[d]=c.random.ba(a[d]);return b};
c.random.ba=function(a){var b;null===a?b=null:"boolean"===typeof a?b=0===Math.round(Math.random())?!1:!0:"string"===typeof a?b=Math.random().toString(36).substr(2,a.length):"number"===typeof a&&(a=Math.floor(Math.log(a)/Math.LN10),b=Math.floor(Math.random()*(Math.pow(10,a+1)-Math.pow(10,a))+Math.pow(10,a)));return b};c.m={};c.m.P=[-180,-90,180,90];c.m.fa=[-10994,8848];c.m.da=["abc",123,!0,null];c.c={};c.c.A=function(a){return"[object Array]"===Object.prototype.toString.call(a[0])?c.c.A(a[0]):a.length};
c.c.s=function(a){if("GeometryCollection"===a.type)return c.c.s(a.geometries[0]);if("Feature"===a.type)return a.geometry?c.c.s(a.geometry):[];if("FeatureCollection"===a.type){for(var b=0;b<a.features.length;++b){var d=c.c.s(a.features[b]);if(0<d.length)break}return d}return a.coordinates};
c.c.o=function(a,b){var d={g:0},e;a.crs&&(d.g++,d.h=a.crs,b&&delete a.crs);if("GeometryCollection"===a.type)for(var f=0;f<a.geometries.length;++f)e=c.c.o(a.geometries[f],b),d.g+=e.g,e.h&&(d.h=e.h);else if("Feature"===a.type&&a.geometry)e=c.c.o(a.geometry,b),d.g+=e.g,e.h&&(d.h=e.h);else if("FeatureCollection"===a.type)for(f=0;f<a.features.length;++f)e=c.c.o(a.features[f],b),d.g+=e.g,e.h&&(d.h=e.h);return d};c.c.K=function(a){var b=c.c.o(a,!0);0<b.g&&(a.crs=b.h)};
